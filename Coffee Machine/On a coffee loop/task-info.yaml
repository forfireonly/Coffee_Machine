type: edu
custom_name: stage5
files:
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import machine.CoffeeMachine;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        public CoffeeMachineTest() {
            super(CoffeeMachine.class);
        }

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;
    import java.util.Scanner;

    public class CoffeeMachine {
        public static String[] stepsToMakeCoffee = {"Starting to make a coffee",
                "Grinding coffee beans",
                "Boiling water",
                "Mixing boiled water with crushed coffee beans",
                "Pouring coffee into the cup",
                "Pouring some milk into the cup",
                "Coffee is ready!"};
        public static String ingridients = "For %d cups of coffee you will need:" +
                "\n%d ml of water" +
                "\n%d ml of milk" +
                "\n%d g of coffee beans";

        public static int WATER_PER_CUP = 200;
        public static int MILK_PER_CUP = 50;
        public static int BEANS_PER_CUP = 15;

        public static String[] questions = {"Write how many ml of water the coffee machine has:",
                "Write how many ml of milk the coffee machine has:",
                "Write how many grams of coffee beans the coffee machine has:",
                 "Write how many cups of coffee you will need:" };
        public static String whatCouldBeMade(int[] ingridientsPresent) {
            int water = ingridientsPresent[0] / WATER_PER_CUP;
            int milk = ingridientsPresent[1] / MILK_PER_CUP;
            int beans = ingridientsPresent[2] / BEANS_PER_CUP;

            int minCups = minToMake(water, milk, beans);
            String whatICanDo = "";

                if (ingridientsPresent[3] == minCups ) {
                    whatICanDo = "Yes, I can make that amount of coffee";
                } else if (ingridientsPresent[3] < minCups) {
                    whatICanDo = "Yes, I can make that amount of coffee (and even " + (minCups - ingridientsPresent[3]) + " more than that)";
                } else {
                    whatICanDo = "No, I can make only " + minCups + " cup(s) of coffee";
                }

            return whatICanDo;
        }
        public static int minToMake(int water, int milk, int beans) {
            int myMin = Math.min(water,milk);
            myMin = Math.min(myMin, beans);
            return myMin;
        }
        public static int[] espresso = {250, 0, 16, 1, 4};
        public static int[] latte = {350, 75, 20, 1, 7};
        public static int[] cappuchino = {200, 100, 12, 1, 6};
        public static void stateOfMachine (int[] array) {
            System.out.printf("The coffee machine has: \n%d of water \n%d of milk \n%d of coffee beans \n%d of disposable" +
                    " cups \n%d of money", array[0], array[1], array[2], array[3], array[4]);
            System.out.println();
        }
        public static void take(int[] initialValues) {
            System.out.printf("I gave you $%d", initialValues[4]);
            System.out.println();
            initialValues[4] = 0;
            stateOfMachine(initialValues);
        }
        public static int[] adjustValues(int[] initialValues, int[] order){
            initialValues[0] -= order[0];
            initialValues[1] -= order[1];
            initialValues[2] -= order[2];
            initialValues[3] -= order[3];
            initialValues[4] += order[4];
            return initialValues;
        }
        public static void buy(int[] initialValues, Scanner scn) {
            System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:");
            String answer = scn.nextLine().trim().toLowerCase();
            switch (answer) {
                case ("1"):
                    int[] initialValuesNew = adjustValues(initialValues, espresso);
                    stateOfMachine(initialValuesNew);
                    break;
                case ("2"):
                    int[] initialValuesNNew = adjustValues(initialValues, latte);
                    stateOfMachine(initialValuesNNew);
                    break;
                case ("3"):
                    int[] initialValuesNNNew =adjustValues(initialValues, cappuchino);
                    stateOfMachine(initialValuesNNNew);
                    break;
                default:
            }
        }
        public static void fill(int[] initialValues, Scanner scn) {

            System.out.println("Write how many ml of water do you want to add:");
            initialValues[0] += Integer.parseInt(scn.next());
            System.out.println("Write how many ml of milk do you want to add: ");
            initialValues[1] += Integer.parseInt(scn.next());
            System.out.println("Write how many grams of coffee beans do you want to add:");
            initialValues[2] += Integer.parseInt(scn.next());
            System.out.println("Write how many disposable cups of coffee do you want to add:");
            initialValues[3] += Integer.parseInt(scn.next());
            stateOfMachine(initialValues);
        }

        public static void main(String[] args) {
            Scanner scn = new Scanner(System.in);
            int[] initialValues = {400, 540, 120, 9, 550};
            stateOfMachine(initialValues);
            System.out.println("Write action (buy, fill, take):");
            String action = scn.nextLine().trim().toLowerCase();

            switch (action) {
                case "buy":
                    buy(initialValues, scn);
                    break;
                case "fill":
                    fill(initialValues, scn);
                    break;
                case "take" :
                    take(initialValues);
                    break;
                default:

            }

        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/33/stages/179/implement
status: Failed
record: 5
